#!/usr/bin/perl
## ----------------------------------------------------------------------------
# cil is a Command line Issue List
# Copyright (C) 2008 Andrew Chilton
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
## ----------------------------------------------------------------------------

use strict;
use warnings;

use Data::Dumper;

use Digest::MD5 qw(md5_hex);
use File::Touch;
use File::Glob ':glob';
use File::Basename;
use Term::CallEditor qw(solicit);
use CIL;
use CIL::Issue;
use CIL::Comment;

my $COMMANDS = {
    init    => 1,
    list    => 1,
    summary => 1,
    add     => 1,
    show    => 1,
    edit    => 1,
    comment => 1,
};

my $gan = $ENV{GIT_AUTHOR_NAME} || 'Your Name';
my $gae = $ENV{GIT_AUTHOR_EMAIL} || 'you@example.org';

my $new_issue_text = <<"EOF";
Summary     : 
Status      : New
CreatedBy   : $gan <$gae>
AssignedTo  : $gan <$gae>
Label       :

Description...
EOF

my $add_comment_text = <<"EOF";
CreatedBy   : $gan <$gae>

Description...
EOF

## ----------------------------------------------------------------------------

{
    my ($command) = shift;
    unless ( defined $command and exists $COMMANDS->{$command} ) {
        usage();
        exit 2;
    }

    if ( $command eq 'init' ) {
        my ($path) = @ARGV;
        $path ||= '.';
        init($path);
    }
    elsif ( $command eq 'list' ) {
        list();

    }
    elsif ( $command eq 'summary' ) {
        summary();

    }
    elsif ( $command eq 'show' ) {
        my ($issue_name) = @ARGV;
        show($issue_name);

    }
    elsif ( $command eq 'add' ) {
        add();

    }
    elsif ( $command eq 'edit' ) {
        my ($issue_name) = @ARGV;
        edit($issue_name);

    }
    elsif ( $command eq 'comment' ) {
        my ($issue_name) = @ARGV;
        comment($issue_name);
    }

    else {
        fatal("program error when trying command '$command'");
    }

}

## ----------------------------------------------------------------------------
# commands

sub init {
    my ($path) = @_;

    # error if $path doesn't exist
    unless ( -d $path ) {
        fatal("path '$path' doesn't exist");
    }

    # error if issues/ already exists
    my $issues_dir = "$path/issues";
    if ( -d $issues_dir ) {
        fatal("issues directory '$issues_dir' already exists, not initialising issues");
    }

    # error if .cil already exists
    my $config = "$path/.cil";
    if ( -f $config ) {
        fatal("config file '$config' already exists, not initialising issues");
    }

    # try to create the issues/ dir
    unless ( mkdir $issues_dir ) {
        fatal("Couldn't create '$issues_dir' directory: $!");
    }

    # create a .cil file here also
    unless ( touch $config ) {
        rmdir $issues_dir;
        fatal("couldn't create a '$config' file");
    }

    # $path/issues/ and $path/.cil create correctly
    msg("initialised empty issue list inside '$path/'");
}

sub list {
    check_paths();

    # find all the issues
    my $issues = CIL->instance->get_issues();
    if ( @$issues ) {
        separator();
        foreach my $issue ( @$issues ) {
            display_issue_short($issue);
        }
        separator();
    }
    else {
        msg('no issues found');
    }
}

sub summary {
    check_paths();

    # find all the issues
    my $issues = CIL->instance->get_issues();
    if ( @$issues ) {
        separator();
        foreach my $issue ( @$issues ) {
            display_issue_summary($issue);
        }
        separator();
    }
    else {
        msg('no issues found');
    }
}

sub show {
    my ($issue_name) = @_;

    # firstly, read the issue in
    my $issue = CIL::Issue->load($issue_name);
    unless ( defined $issue ) {
        fatal("Couldn't load issue '$issue'");
    }
    display_issue_full( $issue );
}

sub add {
    my ($issue_name) = @_;

    # read in the new issue text
    my $fh = solicit( $new_issue_text );

    my $issue = CIL::Issue->new_from_fh( 'tmp', $fh );

    # we've got the issue, so let's name it
    my $unique_str = $issue->Inserted . $issue->Summary . $issue->Description;
    $issue->set_name( substr(md5_hex($unique_str), 0, 8) );
    $issue->save();
    display_issue_full( $issue );
}

sub edit {
    my ($issue_name) = @_;

    my $issue = CIL::Issue->load($issue_name);
    unless ( defined $issue ) {
        fatal("Couldn't load issue '$issue'");
    }

    # create the ini file, then edit it
    my $edit_issue_text = $issue->as_output;

    # read in the new issue text
    my $fh = solicit( join('', @$edit_issue_text) );

    my $issue_edited;
    eval {
        $issue_edited = CIL::Issue->new_from_fh( $issue->name, $fh );
    };
    if ( $@ ) {
        fatal("couldn't parse issue: $@");
    }
    unless ( defined $issue_edited ) {
        fatal("couldn't create issue (program error)");
    }

    $issue_edited->save();
    display_issue_full( $issue_edited );
}

sub comment {
    my ($issue_name) = @_;

    my $issue = CIL::Issue->new_load_issue($issue_name);
    unless ( defined $issue ) {
        fatal("Couldn't load issue '$issue'");
    }

    # read in the new issue text
    my $fh = solicit( $add_comment_text );

    my $cfg;
    eval {
        $cfg = Config::IniFiles->new( -file => $fh );
    };
    if ( $@ ) {
        fatal("couldn't parse comment: $@");
    }

    unless ( defined $cfg ) {
        fatal("not a valid inifile");
    }

    my $comment = CIL::Comment->new();
    foreach my $field ( qw(CreatedBy Description) ) {
        # modify the data directly, otherwise Updated will kick in
        my $value = $cfg->val( 'Comment', $field );
        next unless defined $value;

        $value =~ s/^\s*//;
        $value =~ s/\s*$//;
        $comment->set_no_update($field, $value);
    }

    # tell the comment when it was inserted
    $comment->inserted;

    # add the comment to the issue, update it's timestamp and save it out
    $issue->add_comment( $comment );
    $issue->save();
}

## ----------------------------------------------------------------------------

sub check_paths {
    # make sure an issue directory is available
    unless ( -d 'issues' ) {
        fatal("couldn't find 'issues' directory");
    }
}

sub get_all_issues {
    my @issues;
    my @filenames = <issues/*.yaml>;
    foreach my $filename ( sort @filenames ) {
        push @issues, CIL::Issue->new_load_issue( basename($filename, '.yaml') );
    }
    @issues = sort { $a->Inserted cmp $b->Inserted } @issues;
    return \@issues;
}

## ----------------------------------------------------------------------------
# input/output

sub display_issue_summary {
    my ($issue) = @_;

    my $msg = $issue->name;
    $msg .= "\t";
    $msg .= $issue->Status;
    $msg .= "\t";
    $msg .= $issue->Summary;

    msg($msg);
}

sub display_issue_short {
    my ($issue) = @_;

    title( "Issue " . $issue->name );
    field( 'Summary', $issue->Summary() );
    field( 'CreatedBy', $issue->CreatedBy() );
    field( 'AssignedTo', $issue->AssignedTo() );
    field( 'Inserted', $issue->Inserted() );
    field( 'Status', $issue->Status() );
    field( 'Labels', join(' ', @{$issue->Label()}) );
}

sub display_issue_full {
    my ($issue) = @_;

    separator();
    title('Issue ' . $issue->name);
    field( 'Summary', $issue->Summary() );
    field( 'Status', $issue->Status() );
    field( 'CreatedBy', $issue->CreatedBy() );
    field( 'AssignedTo', $issue->AssignedTo() );
    field( 'Inserted', $issue->Inserted() );
    field( 'Updated', $issue->Inserted() );
    field( 'Label', $_ )
        foreach sort @{$issue->Label()};
    field( 'Comment', $_ )
        foreach sort @{$issue->Comment()};
    field( 'Attachment', $_ )
        foreach sort @{$issue->Attachment()};
    separator();
    text('Description', $issue->Description());
    separator();
}

sub msg {
    print ( defined $_[0] ? $_[0] : '' );
    print "\n";
}

sub separator {
    msg('=' x 79);
}

sub title {
    my ($title) = @_;
    my $msg = "--- $title ";
    $msg .= '-' x (74 - length($title));
    msg($msg);
}

sub field {
    my ($field, $value) = @_;
    my $msg = "$field";
    $msg .= " " x (12 - length($field));
    msg("$msg: " . (defined $value ? $value : '') );
}

sub text {
    my ($field, $value) = @_;
    title($field);
    msg "";
    msg($value);
    msg "";
}

sub err {
    print STDERR ( defined $_[0] ? $_[0] : '' );
    print STDERR "\n";
}

sub fatal {
    my ($msg) = @_;
    chomp $msg;
    print STDERR $msg, "\n";
    exit 2;
}

## ----------------------------------------------------------------------------
# program info

sub usage {
   print <<"END_USAGE";
Usage: $0 <command> [options]

Commands:
   init    <path>
   add
   summary
   list
   show    <issue>
   edit    <issue>

See <http://kapiti.geek.nz/software/cil.html> for further information.
Report bugs to <andychilton -at- gmail -dot- com>.
END_USAGE
}

## ----------------------------------------------------------------------------
